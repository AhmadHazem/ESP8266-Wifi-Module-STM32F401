
Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ee0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001074  08001074  00011074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001120  08001120  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001120  08001120  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001120  08001120  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001120  08001120  00011120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001124  08001124  00011124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000074  0800119c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  0800119c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000106f  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006b8  00000000  00000000  00021156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00021810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f4  00000000  00000000  00021998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001d30  00000000  00000000  00021a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001615  00000000  00000000  000237bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008208  00000000  00000000  00024dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000068c  00000000  00000000  0002cfdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0002d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800105c 	.word	0x0800105c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	0800105c 	.word	0x0800105c

080001d4 <Det_ReportError>:
#include "BIT_MATH.h"

#include "DET.h"

void Det_ReportError(uint8 u8ModuleId, uint8 u8FunctionId, uint8 u8ErrorId)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
	while(1);
 80001e6:	e7fe      	b.n	80001e6 <Det_ReportError+0x12>

080001e8 <GPIO_Init>:

static GPIO_type* GPIOx[3]={GPIOA,GPIOB,GPIOC};
static uint8 u8PinsCounter = 0u;

void GPIO_Init (void)
{
 80001e8:	b598      	push	{r3, r4, r7, lr}
 80001ea:	af00      	add	r7, sp, #0

		if (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId >= GPIO_UPPER_PINS_NUMBERS)
 80001ec:	4ba2      	ldr	r3, [pc, #648]	; (8000478 <GPIO_Init+0x290>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	4619      	mov	r1, r3
 80001f2:	4aa2      	ldr	r2, [pc, #648]	; (800047c <GPIO_Init+0x294>)
 80001f4:	460b      	mov	r3, r1
 80001f6:	00db      	lsls	r3, r3, #3
 80001f8:	1a5b      	subs	r3, r3, r1
 80001fa:	4413      	add	r3, r2
 80001fc:	3301      	adds	r3, #1
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b0f      	cmp	r3, #15
 8000202:	d904      	bls.n	800020e <GPIO_Init+0x26>
			Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PIN_STATE, GPIO_UDT_SET_PIN_VALUE_ID);
 8000204:	2202      	movs	r2, #2
 8000206:	2102      	movs	r1, #2
 8000208:	2002      	movs	r0, #2
 800020a:	f7ff ffe3 	bl	80001d4 <Det_ReportError>

		GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->MODER &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 800020e:	4b9a      	ldr	r3, [pc, #616]	; (8000478 <GPIO_Init+0x290>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	4619      	mov	r1, r3
 8000214:	4a99      	ldr	r2, [pc, #612]	; (800047c <GPIO_Init+0x294>)
 8000216:	460b      	mov	r3, r1
 8000218:	00db      	lsls	r3, r3, #3
 800021a:	1a5b      	subs	r3, r3, r1
 800021c:	4413      	add	r3, r2
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	3b01      	subs	r3, #1
 8000222:	4a97      	ldr	r2, [pc, #604]	; (8000480 <GPIO_Init+0x298>)
 8000224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b93      	ldr	r3, [pc, #588]	; (8000478 <GPIO_Init+0x290>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4618      	mov	r0, r3
 8000230:	4992      	ldr	r1, [pc, #584]	; (800047c <GPIO_Init+0x294>)
 8000232:	4603      	mov	r3, r0
 8000234:	00db      	lsls	r3, r3, #3
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	440b      	add	r3, r1
 800023a:	3301      	adds	r3, #1
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	2103      	movs	r1, #3
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	43db      	mvns	r3, r3
 8000248:	461c      	mov	r4, r3
 800024a:	4b8b      	ldr	r3, [pc, #556]	; (8000478 <GPIO_Init+0x290>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	498a      	ldr	r1, [pc, #552]	; (800047c <GPIO_Init+0x294>)
 8000252:	4603      	mov	r3, r0
 8000254:	00db      	lsls	r3, r3, #3
 8000256:	1a1b      	subs	r3, r3, r0
 8000258:	440b      	add	r3, r1
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	3b01      	subs	r3, #1
 800025e:	4988      	ldr	r1, [pc, #544]	; (8000480 <GPIO_Init+0x298>)
 8000260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000264:	4022      	ands	r2, r4
 8000266:	601a      	str	r2, [r3, #0]
		GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->MODER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtMode) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 8000268:	4b83      	ldr	r3, [pc, #524]	; (8000478 <GPIO_Init+0x290>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	4619      	mov	r1, r3
 800026e:	4a83      	ldr	r2, [pc, #524]	; (800047c <GPIO_Init+0x294>)
 8000270:	460b      	mov	r3, r1
 8000272:	00db      	lsls	r3, r3, #3
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	3b01      	subs	r3, #1
 800027c:	4a80      	ldr	r2, [pc, #512]	; (8000480 <GPIO_Init+0x298>)
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b7c      	ldr	r3, [pc, #496]	; (8000478 <GPIO_Init+0x290>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	4618      	mov	r0, r3
 800028a:	497c      	ldr	r1, [pc, #496]	; (800047c <GPIO_Init+0x294>)
 800028c:	4603      	mov	r3, r0
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	1a1b      	subs	r3, r3, r0
 8000292:	440b      	add	r3, r1
 8000294:	3302      	adds	r3, #2
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461c      	mov	r4, r3
 800029a:	4b77      	ldr	r3, [pc, #476]	; (8000478 <GPIO_Init+0x290>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	4976      	ldr	r1, [pc, #472]	; (800047c <GPIO_Init+0x294>)
 80002a2:	4603      	mov	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	1a1b      	subs	r3, r3, r0
 80002a8:	440b      	add	r3, r1
 80002aa:	3301      	adds	r3, #1
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	fa04 f303 	lsl.w	r3, r4, r3
 80002b4:	461c      	mov	r4, r3
 80002b6:	4b70      	ldr	r3, [pc, #448]	; (8000478 <GPIO_Init+0x290>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	496f      	ldr	r1, [pc, #444]	; (800047c <GPIO_Init+0x294>)
 80002be:	4603      	mov	r3, r0
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	1a1b      	subs	r3, r3, r0
 80002c4:	440b      	add	r3, r1
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	496d      	ldr	r1, [pc, #436]	; (8000480 <GPIO_Init+0x298>)
 80002cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d0:	4322      	orrs	r2, r4
 80002d2:	601a      	str	r2, [r3, #0]
		if(GPIO_udtArrayOfPins[u8PinsCounter].udtMode == GPIO_OUTPUT)
 80002d4:	4b68      	ldr	r3, [pc, #416]	; (8000478 <GPIO_Init+0x290>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4619      	mov	r1, r3
 80002da:	4a68      	ldr	r2, [pc, #416]	; (800047c <GPIO_Init+0x294>)
 80002dc:	460b      	mov	r3, r1
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	1a5b      	subs	r3, r3, r1
 80002e2:	4413      	add	r3, r2
 80002e4:	3302      	adds	r3, #2
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	f040 80cb 	bne.w	8000484 <GPIO_Init+0x29c>
		{
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER &= ~(1u << (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId));
 80002ee:	4b62      	ldr	r3, [pc, #392]	; (8000478 <GPIO_Init+0x290>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4a61      	ldr	r2, [pc, #388]	; (800047c <GPIO_Init+0x294>)
 80002f6:	460b      	mov	r3, r1
 80002f8:	00db      	lsls	r3, r3, #3
 80002fa:	1a5b      	subs	r3, r3, r1
 80002fc:	4413      	add	r3, r2
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	3b01      	subs	r3, #1
 8000302:	4a5f      	ldr	r2, [pc, #380]	; (8000480 <GPIO_Init+0x298>)
 8000304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000308:	6859      	ldr	r1, [r3, #4]
 800030a:	4b5b      	ldr	r3, [pc, #364]	; (8000478 <GPIO_Init+0x290>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	4a5a      	ldr	r2, [pc, #360]	; (800047c <GPIO_Init+0x294>)
 8000312:	4603      	mov	r3, r0
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	1a1b      	subs	r3, r3, r0
 8000318:	4413      	add	r3, r2
 800031a:	3301      	adds	r3, #1
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	2301      	movs	r3, #1
 8000322:	4093      	lsls	r3, r2
 8000324:	43da      	mvns	r2, r3
 8000326:	4b54      	ldr	r3, [pc, #336]	; (8000478 <GPIO_Init+0x290>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	461c      	mov	r4, r3
 800032c:	4853      	ldr	r0, [pc, #332]	; (800047c <GPIO_Init+0x294>)
 800032e:	4623      	mov	r3, r4
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	1b1b      	subs	r3, r3, r4
 8000334:	4403      	add	r3, r0
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	3b01      	subs	r3, #1
 800033a:	4851      	ldr	r0, [pc, #324]	; (8000480 <GPIO_Init+0x298>)
 800033c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000340:	400a      	ands	r2, r1
 8000342:	605a      	str	r2, [r3, #4]
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtType) <<
 8000344:	4b4c      	ldr	r3, [pc, #304]	; (8000478 <GPIO_Init+0x290>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4619      	mov	r1, r3
 800034a:	4a4c      	ldr	r2, [pc, #304]	; (800047c <GPIO_Init+0x294>)
 800034c:	460b      	mov	r3, r1
 800034e:	00db      	lsls	r3, r3, #3
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	4413      	add	r3, r2
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	3b01      	subs	r3, #1
 8000358:	4a49      	ldr	r2, [pc, #292]	; (8000480 <GPIO_Init+0x298>)
 800035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035e:	685a      	ldr	r2, [r3, #4]
 8000360:	4b45      	ldr	r3, [pc, #276]	; (8000478 <GPIO_Init+0x290>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	4945      	ldr	r1, [pc, #276]	; (800047c <GPIO_Init+0x294>)
 8000368:	4603      	mov	r3, r0
 800036a:	00db      	lsls	r3, r3, #3
 800036c:	1a1b      	subs	r3, r3, r0
 800036e:	440b      	add	r3, r1
 8000370:	3303      	adds	r3, #3
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	461c      	mov	r4, r3
						                                                      (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId));
 8000376:	4b40      	ldr	r3, [pc, #256]	; (8000478 <GPIO_Init+0x290>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	493f      	ldr	r1, [pc, #252]	; (800047c <GPIO_Init+0x294>)
 800037e:	4603      	mov	r3, r0
 8000380:	00db      	lsls	r3, r3, #3
 8000382:	1a1b      	subs	r3, r3, r0
 8000384:	440b      	add	r3, r1
 8000386:	3301      	adds	r3, #1
 8000388:	781b      	ldrb	r3, [r3, #0]
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtType) <<
 800038a:	fa04 f303 	lsl.w	r3, r4, r3
 800038e:	461c      	mov	r4, r3
 8000390:	4b39      	ldr	r3, [pc, #228]	; (8000478 <GPIO_Init+0x290>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	4618      	mov	r0, r3
 8000396:	4939      	ldr	r1, [pc, #228]	; (800047c <GPIO_Init+0x294>)
 8000398:	4603      	mov	r3, r0
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	1a1b      	subs	r3, r3, r0
 800039e:	440b      	add	r3, r1
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4936      	ldr	r1, [pc, #216]	; (8000480 <GPIO_Init+0x298>)
 80003a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003aa:	4322      	orrs	r2, r4
 80003ac:	605a      	str	r2, [r3, #4]

			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 80003ae:	4b32      	ldr	r3, [pc, #200]	; (8000478 <GPIO_Init+0x290>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	4619      	mov	r1, r3
 80003b4:	4a31      	ldr	r2, [pc, #196]	; (800047c <GPIO_Init+0x294>)
 80003b6:	460b      	mov	r3, r1
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	1a5b      	subs	r3, r3, r1
 80003bc:	4413      	add	r3, r2
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	4a2f      	ldr	r2, [pc, #188]	; (8000480 <GPIO_Init+0x298>)
 80003c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c8:	689a      	ldr	r2, [r3, #8]
 80003ca:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <GPIO_Init+0x290>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	4618      	mov	r0, r3
 80003d0:	492a      	ldr	r1, [pc, #168]	; (800047c <GPIO_Init+0x294>)
 80003d2:	4603      	mov	r3, r0
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	1a1b      	subs	r3, r3, r0
 80003d8:	440b      	add	r3, r1
 80003da:	3301      	adds	r3, #1
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	2103      	movs	r1, #3
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43db      	mvns	r3, r3
 80003e8:	461c      	mov	r4, r3
 80003ea:	4b23      	ldr	r3, [pc, #140]	; (8000478 <GPIO_Init+0x290>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	4922      	ldr	r1, [pc, #136]	; (800047c <GPIO_Init+0x294>)
 80003f2:	4603      	mov	r3, r0
 80003f4:	00db      	lsls	r3, r3, #3
 80003f6:	1a1b      	subs	r3, r3, r0
 80003f8:	440b      	add	r3, r1
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	4920      	ldr	r1, [pc, #128]	; (8000480 <GPIO_Init+0x298>)
 8000400:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000404:	4022      	ands	r2, r4
 8000406:	609a      	str	r2, [r3, #8]
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtSpeed) <<
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <GPIO_Init+0x290>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4619      	mov	r1, r3
 800040e:	4a1b      	ldr	r2, [pc, #108]	; (800047c <GPIO_Init+0x294>)
 8000410:	460b      	mov	r3, r1
 8000412:	00db      	lsls	r3, r3, #3
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	4413      	add	r3, r2
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	3b01      	subs	r3, #1
 800041c:	4a18      	ldr	r2, [pc, #96]	; (8000480 <GPIO_Init+0x298>)
 800041e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000422:	689a      	ldr	r2, [r3, #8]
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <GPIO_Init+0x290>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	4914      	ldr	r1, [pc, #80]	; (800047c <GPIO_Init+0x294>)
 800042c:	4603      	mov	r3, r0
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	1a1b      	subs	r3, r3, r0
 8000432:	440b      	add	r3, r1
 8000434:	3304      	adds	r3, #4
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	461c      	mov	r4, r3
		                        												 ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <GPIO_Init+0x290>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	4618      	mov	r0, r3
 8000440:	490e      	ldr	r1, [pc, #56]	; (800047c <GPIO_Init+0x294>)
 8000442:	4603      	mov	r3, r0
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	1a1b      	subs	r3, r3, r0
 8000448:	440b      	add	r3, r1
 800044a:	3301      	adds	r3, #1
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	005b      	lsls	r3, r3, #1
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtSpeed) <<
 8000450:	fa04 f303 	lsl.w	r3, r4, r3
 8000454:	461c      	mov	r4, r3
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <GPIO_Init+0x290>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	4907      	ldr	r1, [pc, #28]	; (800047c <GPIO_Init+0x294>)
 800045e:	4603      	mov	r3, r0
 8000460:	00db      	lsls	r3, r3, #3
 8000462:	1a1b      	subs	r3, r3, r0
 8000464:	440b      	add	r3, r1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	3b01      	subs	r3, #1
 800046a:	4905      	ldr	r1, [pc, #20]	; (8000480 <GPIO_Init+0x298>)
 800046c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000470:	4322      	orrs	r2, r4
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	e22a      	b.n	80008cc <GPIO_Init+0x6e4>
 8000476:	bf00      	nop
 8000478:	20000090 	.word	0x20000090
 800047c:	20000000 	.word	0x20000000
 8000480:	20000018 	.word	0x20000018
		}
		else if(GPIO_udtArrayOfPins[u8PinsCounter].udtMode == GPIO_INPUT)
 8000484:	4b76      	ldr	r3, [pc, #472]	; (8000660 <GPIO_Init+0x478>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	4a76      	ldr	r2, [pc, #472]	; (8000664 <GPIO_Init+0x47c>)
 800048c:	460b      	mov	r3, r1
 800048e:	00db      	lsls	r3, r3, #3
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	4413      	add	r3, r2
 8000494:	3302      	adds	r3, #2
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d163      	bne.n	8000564 <GPIO_Init+0x37c>
		{
			/* !Comment: Setting the input pin state */
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->PUPDR &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 800049c:	4b70      	ldr	r3, [pc, #448]	; (8000660 <GPIO_Init+0x478>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	4a70      	ldr	r2, [pc, #448]	; (8000664 <GPIO_Init+0x47c>)
 80004a4:	460b      	mov	r3, r1
 80004a6:	00db      	lsls	r3, r3, #3
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	4413      	add	r3, r2
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	4a6d      	ldr	r2, [pc, #436]	; (8000668 <GPIO_Init+0x480>)
 80004b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b6:	68da      	ldr	r2, [r3, #12]
 80004b8:	4b69      	ldr	r3, [pc, #420]	; (8000660 <GPIO_Init+0x478>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	4969      	ldr	r1, [pc, #420]	; (8000664 <GPIO_Init+0x47c>)
 80004c0:	4603      	mov	r3, r0
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	1a1b      	subs	r3, r3, r0
 80004c6:	440b      	add	r3, r1
 80004c8:	3301      	adds	r3, #1
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	2103      	movs	r1, #3
 80004d0:	fa01 f303 	lsl.w	r3, r1, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	461c      	mov	r4, r3
 80004d8:	4b61      	ldr	r3, [pc, #388]	; (8000660 <GPIO_Init+0x478>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	4961      	ldr	r1, [pc, #388]	; (8000664 <GPIO_Init+0x47c>)
 80004e0:	4603      	mov	r3, r0
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	1a1b      	subs	r3, r3, r0
 80004e6:	440b      	add	r3, r1
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	495e      	ldr	r1, [pc, #376]	; (8000668 <GPIO_Init+0x480>)
 80004ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004f2:	4022      	ands	r2, r4
 80004f4:	60da      	str	r2, [r3, #12]
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->PUPDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtInputState) <<
 80004f6:	4b5a      	ldr	r3, [pc, #360]	; (8000660 <GPIO_Init+0x478>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	4619      	mov	r1, r3
 80004fc:	4a59      	ldr	r2, [pc, #356]	; (8000664 <GPIO_Init+0x47c>)
 80004fe:	460b      	mov	r3, r1
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	1a5b      	subs	r3, r3, r1
 8000504:	4413      	add	r3, r2
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	3b01      	subs	r3, #1
 800050a:	4a57      	ldr	r2, [pc, #348]	; (8000668 <GPIO_Init+0x480>)
 800050c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000510:	68da      	ldr	r2, [r3, #12]
 8000512:	4b53      	ldr	r3, [pc, #332]	; (8000660 <GPIO_Init+0x478>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	4952      	ldr	r1, [pc, #328]	; (8000664 <GPIO_Init+0x47c>)
 800051a:	4603      	mov	r3, r0
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	1a1b      	subs	r3, r3, r0
 8000520:	440b      	add	r3, r1
 8000522:	3305      	adds	r3, #5
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	461c      	mov	r4, r3
		                      ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 8000528:	4b4d      	ldr	r3, [pc, #308]	; (8000660 <GPIO_Init+0x478>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	494d      	ldr	r1, [pc, #308]	; (8000664 <GPIO_Init+0x47c>)
 8000530:	4603      	mov	r3, r0
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	1a1b      	subs	r3, r3, r0
 8000536:	440b      	add	r3, r1
 8000538:	3301      	adds	r3, #1
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	005b      	lsls	r3, r3, #1
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->PUPDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtInputState) <<
 800053e:	fa04 f303 	lsl.w	r3, r4, r3
 8000542:	461c      	mov	r4, r3
 8000544:	4b46      	ldr	r3, [pc, #280]	; (8000660 <GPIO_Init+0x478>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	4946      	ldr	r1, [pc, #280]	; (8000664 <GPIO_Init+0x47c>)
 800054c:	4603      	mov	r3, r0
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	1a1b      	subs	r3, r3, r0
 8000552:	440b      	add	r3, r1
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	3b01      	subs	r3, #1
 8000558:	4943      	ldr	r1, [pc, #268]	; (8000668 <GPIO_Init+0x480>)
 800055a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800055e:	4322      	orrs	r2, r4
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	e1b3      	b.n	80008cc <GPIO_Init+0x6e4>
		}
		else if (GPIO_udtArrayOfPins[u8PinsCounter].udtMode == GPIO_AF)
 8000564:	4b3e      	ldr	r3, [pc, #248]	; (8000660 <GPIO_Init+0x478>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	4a3e      	ldr	r2, [pc, #248]	; (8000664 <GPIO_Init+0x47c>)
 800056c:	460b      	mov	r3, r1
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	1a5b      	subs	r3, r3, r1
 8000572:	4413      	add	r3, r2
 8000574:	3302      	adds	r3, #2
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b02      	cmp	r3, #2
 800057a:	f040 81a2 	bne.w	80008c2 <GPIO_Init+0x6da>
		{
			if (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId < GPIO_LOWER_PINS_NUMBERS)
 800057e:	4b38      	ldr	r3, [pc, #224]	; (8000660 <GPIO_Init+0x478>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	4a37      	ldr	r2, [pc, #220]	; (8000664 <GPIO_Init+0x47c>)
 8000586:	460b      	mov	r3, r1
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	1a5b      	subs	r3, r3, r1
 800058c:	4413      	add	r3, r2
 800058e:	3301      	adds	r3, #1
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b07      	cmp	r3, #7
 8000594:	d86a      	bhi.n	800066c <GPIO_Init+0x484>
			{
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRL &= ~((0b1111) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 4));
 8000596:	4b32      	ldr	r3, [pc, #200]	; (8000660 <GPIO_Init+0x478>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	4619      	mov	r1, r3
 800059c:	4a31      	ldr	r2, [pc, #196]	; (8000664 <GPIO_Init+0x47c>)
 800059e:	460b      	mov	r3, r1
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	1a5b      	subs	r3, r3, r1
 80005a4:	4413      	add	r3, r2
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	4a2f      	ldr	r2, [pc, #188]	; (8000668 <GPIO_Init+0x480>)
 80005ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b0:	6a1a      	ldr	r2, [r3, #32]
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <GPIO_Init+0x478>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	492a      	ldr	r1, [pc, #168]	; (8000664 <GPIO_Init+0x47c>)
 80005ba:	4603      	mov	r3, r0
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	1a1b      	subs	r3, r3, r0
 80005c0:	440b      	add	r3, r1
 80005c2:	3301      	adds	r3, #1
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	210f      	movs	r1, #15
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	43db      	mvns	r3, r3
 80005d0:	461c      	mov	r4, r3
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <GPIO_Init+0x478>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	4922      	ldr	r1, [pc, #136]	; (8000664 <GPIO_Init+0x47c>)
 80005da:	4603      	mov	r3, r0
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	1a1b      	subs	r3, r3, r0
 80005e0:	440b      	add	r3, r1
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	4920      	ldr	r1, [pc, #128]	; (8000668 <GPIO_Init+0x480>)
 80005e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005ec:	4022      	ands	r2, r4
 80005ee:	621a      	str	r2, [r3, #32]
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRL |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtAlternativeFunction) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 4));
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <GPIO_Init+0x478>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <GPIO_Init+0x47c>)
 80005f8:	460b      	mov	r3, r1
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	3b01      	subs	r3, #1
 8000604:	4a18      	ldr	r2, [pc, #96]	; (8000668 <GPIO_Init+0x480>)
 8000606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060a:	6a1a      	ldr	r2, [r3, #32]
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <GPIO_Init+0x478>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	4914      	ldr	r1, [pc, #80]	; (8000664 <GPIO_Init+0x47c>)
 8000614:	4603      	mov	r3, r0
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	1a1b      	subs	r3, r3, r0
 800061a:	440b      	add	r3, r1
 800061c:	3306      	adds	r3, #6
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461c      	mov	r4, r3
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <GPIO_Init+0x478>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	490e      	ldr	r1, [pc, #56]	; (8000664 <GPIO_Init+0x47c>)
 800062a:	4603      	mov	r3, r0
 800062c:	00db      	lsls	r3, r3, #3
 800062e:	1a1b      	subs	r3, r3, r0
 8000630:	440b      	add	r3, r1
 8000632:	3301      	adds	r3, #1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	fa04 f303 	lsl.w	r3, r4, r3
 800063c:	461c      	mov	r4, r3
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <GPIO_Init+0x478>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	4907      	ldr	r1, [pc, #28]	; (8000664 <GPIO_Init+0x47c>)
 8000646:	4603      	mov	r3, r0
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	1a1b      	subs	r3, r3, r0
 800064c:	440b      	add	r3, r1
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	4905      	ldr	r1, [pc, #20]	; (8000668 <GPIO_Init+0x480>)
 8000654:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000658:	4322      	orrs	r2, r4
 800065a:	621a      	str	r2, [r3, #32]
 800065c:	e06d      	b.n	800073a <GPIO_Init+0x552>
 800065e:	bf00      	nop
 8000660:	20000090 	.word	0x20000090
 8000664:	20000000 	.word	0x20000000
 8000668:	20000018 	.word	0x20000018
			}
			else
			{
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRH &= ~((0b1111) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId % 8) * 4));
 800066c:	4b9b      	ldr	r3, [pc, #620]	; (80008dc <GPIO_Init+0x6f4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4a9b      	ldr	r2, [pc, #620]	; (80008e0 <GPIO_Init+0x6f8>)
 8000674:	460b      	mov	r3, r1
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	1a5b      	subs	r3, r3, r1
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	3b01      	subs	r3, #1
 8000680:	4a98      	ldr	r2, [pc, #608]	; (80008e4 <GPIO_Init+0x6fc>)
 8000682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000688:	4b94      	ldr	r3, [pc, #592]	; (80008dc <GPIO_Init+0x6f4>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	4994      	ldr	r1, [pc, #592]	; (80008e0 <GPIO_Init+0x6f8>)
 8000690:	4603      	mov	r3, r0
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	1a1b      	subs	r3, r3, r0
 8000696:	440b      	add	r3, r1
 8000698:	3301      	adds	r3, #1
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f003 0307 	and.w	r3, r3, #7
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	210f      	movs	r1, #15
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	461c      	mov	r4, r3
 80006ac:	4b8b      	ldr	r3, [pc, #556]	; (80008dc <GPIO_Init+0x6f4>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	498b      	ldr	r1, [pc, #556]	; (80008e0 <GPIO_Init+0x6f8>)
 80006b4:	4603      	mov	r3, r0
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	1a1b      	subs	r3, r3, r0
 80006ba:	440b      	add	r3, r1
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3b01      	subs	r3, #1
 80006c0:	4988      	ldr	r1, [pc, #544]	; (80008e4 <GPIO_Init+0x6fc>)
 80006c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006c6:	4022      	ands	r2, r4
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRH |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtAlternativeFunction) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId % 8) * 4));
 80006ca:	4b84      	ldr	r3, [pc, #528]	; (80008dc <GPIO_Init+0x6f4>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4a83      	ldr	r2, [pc, #524]	; (80008e0 <GPIO_Init+0x6f8>)
 80006d2:	460b      	mov	r3, r1
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	1a5b      	subs	r3, r3, r1
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3b01      	subs	r3, #1
 80006de:	4a81      	ldr	r2, [pc, #516]	; (80008e4 <GPIO_Init+0x6fc>)
 80006e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006e6:	4b7d      	ldr	r3, [pc, #500]	; (80008dc <GPIO_Init+0x6f4>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	497c      	ldr	r1, [pc, #496]	; (80008e0 <GPIO_Init+0x6f8>)
 80006ee:	4603      	mov	r3, r0
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	1a1b      	subs	r3, r3, r0
 80006f4:	440b      	add	r3, r1
 80006f6:	3306      	adds	r3, #6
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461c      	mov	r4, r3
 80006fc:	4b77      	ldr	r3, [pc, #476]	; (80008dc <GPIO_Init+0x6f4>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	4977      	ldr	r1, [pc, #476]	; (80008e0 <GPIO_Init+0x6f8>)
 8000704:	4603      	mov	r3, r0
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	1a1b      	subs	r3, r3, r0
 800070a:	440b      	add	r3, r1
 800070c:	3301      	adds	r3, #1
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f003 0307 	and.w	r3, r3, #7
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	fa04 f303 	lsl.w	r3, r4, r3
 800071a:	461c      	mov	r4, r3
 800071c:	4b6f      	ldr	r3, [pc, #444]	; (80008dc <GPIO_Init+0x6f4>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	496f      	ldr	r1, [pc, #444]	; (80008e0 <GPIO_Init+0x6f8>)
 8000724:	4603      	mov	r3, r0
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	1a1b      	subs	r3, r3, r0
 800072a:	440b      	add	r3, r1
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	3b01      	subs	r3, #1
 8000730:	496c      	ldr	r1, [pc, #432]	; (80008e4 <GPIO_Init+0x6fc>)
 8000732:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000736:	4322      	orrs	r2, r4
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
			}

			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER &= ~(1u << (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId));
 800073a:	4b68      	ldr	r3, [pc, #416]	; (80008dc <GPIO_Init+0x6f4>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4619      	mov	r1, r3
 8000740:	4a67      	ldr	r2, [pc, #412]	; (80008e0 <GPIO_Init+0x6f8>)
 8000742:	460b      	mov	r3, r1
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	1a5b      	subs	r3, r3, r1
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	4a65      	ldr	r2, [pc, #404]	; (80008e4 <GPIO_Init+0x6fc>)
 8000750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000754:	6859      	ldr	r1, [r3, #4]
 8000756:	4b61      	ldr	r3, [pc, #388]	; (80008dc <GPIO_Init+0x6f4>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	4a60      	ldr	r2, [pc, #384]	; (80008e0 <GPIO_Init+0x6f8>)
 800075e:	4603      	mov	r3, r0
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	1a1b      	subs	r3, r3, r0
 8000764:	4413      	add	r3, r2
 8000766:	3301      	adds	r3, #1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2301      	movs	r3, #1
 800076e:	4093      	lsls	r3, r2
 8000770:	43da      	mvns	r2, r3
 8000772:	4b5a      	ldr	r3, [pc, #360]	; (80008dc <GPIO_Init+0x6f4>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	461c      	mov	r4, r3
 8000778:	4859      	ldr	r0, [pc, #356]	; (80008e0 <GPIO_Init+0x6f8>)
 800077a:	4623      	mov	r3, r4
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	1b1b      	subs	r3, r3, r4
 8000780:	4403      	add	r3, r0
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	3b01      	subs	r3, #1
 8000786:	4857      	ldr	r0, [pc, #348]	; (80008e4 <GPIO_Init+0x6fc>)
 8000788:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800078c:	400a      	ands	r2, r1
 800078e:	605a      	str	r2, [r3, #4]
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtType) <<
 8000790:	4b52      	ldr	r3, [pc, #328]	; (80008dc <GPIO_Init+0x6f4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	4a52      	ldr	r2, [pc, #328]	; (80008e0 <GPIO_Init+0x6f8>)
 8000798:	460b      	mov	r3, r1
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a4f      	ldr	r2, [pc, #316]	; (80008e4 <GPIO_Init+0x6fc>)
 80007a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	4b4b      	ldr	r3, [pc, #300]	; (80008dc <GPIO_Init+0x6f4>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	494b      	ldr	r1, [pc, #300]	; (80008e0 <GPIO_Init+0x6f8>)
 80007b4:	4603      	mov	r3, r0
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	1a1b      	subs	r3, r3, r0
 80007ba:	440b      	add	r3, r1
 80007bc:	3303      	adds	r3, #3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461c      	mov	r4, r3
						                                                      (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId));
 80007c2:	4b46      	ldr	r3, [pc, #280]	; (80008dc <GPIO_Init+0x6f4>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	4945      	ldr	r1, [pc, #276]	; (80008e0 <GPIO_Init+0x6f8>)
 80007ca:	4603      	mov	r3, r0
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	1a1b      	subs	r3, r3, r0
 80007d0:	440b      	add	r3, r1
 80007d2:	3301      	adds	r3, #1
 80007d4:	781b      	ldrb	r3, [r3, #0]
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtType) <<
 80007d6:	fa04 f303 	lsl.w	r3, r4, r3
 80007da:	461c      	mov	r4, r3
 80007dc:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <GPIO_Init+0x6f4>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	493f      	ldr	r1, [pc, #252]	; (80008e0 <GPIO_Init+0x6f8>)
 80007e4:	4603      	mov	r3, r0
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	1a1b      	subs	r3, r3, r0
 80007ea:	440b      	add	r3, r1
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	493c      	ldr	r1, [pc, #240]	; (80008e4 <GPIO_Init+0x6fc>)
 80007f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007f6:	4322      	orrs	r2, r4
 80007f8:	605a      	str	r2, [r3, #4]

			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 80007fa:	4b38      	ldr	r3, [pc, #224]	; (80008dc <GPIO_Init+0x6f4>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4619      	mov	r1, r3
 8000800:	4a37      	ldr	r2, [pc, #220]	; (80008e0 <GPIO_Init+0x6f8>)
 8000802:	460b      	mov	r3, r1
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	1a5b      	subs	r3, r3, r1
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3b01      	subs	r3, #1
 800080e:	4a35      	ldr	r2, [pc, #212]	; (80008e4 <GPIO_Init+0x6fc>)
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	689a      	ldr	r2, [r3, #8]
 8000816:	4b31      	ldr	r3, [pc, #196]	; (80008dc <GPIO_Init+0x6f4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	4930      	ldr	r1, [pc, #192]	; (80008e0 <GPIO_Init+0x6f8>)
 800081e:	4603      	mov	r3, r0
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	1a1b      	subs	r3, r3, r0
 8000824:	440b      	add	r3, r1
 8000826:	3301      	adds	r3, #1
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	2103      	movs	r1, #3
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	461c      	mov	r4, r3
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <GPIO_Init+0x6f4>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	4928      	ldr	r1, [pc, #160]	; (80008e0 <GPIO_Init+0x6f8>)
 800083e:	4603      	mov	r3, r0
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	1a1b      	subs	r3, r3, r0
 8000844:	440b      	add	r3, r1
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	3b01      	subs	r3, #1
 800084a:	4926      	ldr	r1, [pc, #152]	; (80008e4 <GPIO_Init+0x6fc>)
 800084c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000850:	4022      	ands	r2, r4
 8000852:	609a      	str	r2, [r3, #8]
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtSpeed) <<
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <GPIO_Init+0x6f4>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <GPIO_Init+0x6f8>)
 800085c:	460b      	mov	r3, r1
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	1a5b      	subs	r3, r3, r1
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3b01      	subs	r3, #1
 8000868:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <GPIO_Init+0x6fc>)
 800086a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <GPIO_Init+0x6f4>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	491a      	ldr	r1, [pc, #104]	; (80008e0 <GPIO_Init+0x6f8>)
 8000878:	4603      	mov	r3, r0
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	1a1b      	subs	r3, r3, r0
 800087e:	440b      	add	r3, r1
 8000880:	3304      	adds	r3, #4
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461c      	mov	r4, r3
		                        												 ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <GPIO_Init+0x6f4>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	4914      	ldr	r1, [pc, #80]	; (80008e0 <GPIO_Init+0x6f8>)
 800088e:	4603      	mov	r3, r0
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	1a1b      	subs	r3, r3, r0
 8000894:	440b      	add	r3, r1
 8000896:	3301      	adds	r3, #1
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	005b      	lsls	r3, r3, #1
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtSpeed) <<
 800089c:	fa04 f303 	lsl.w	r3, r4, r3
 80008a0:	461c      	mov	r4, r3
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <GPIO_Init+0x6f4>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	490d      	ldr	r1, [pc, #52]	; (80008e0 <GPIO_Init+0x6f8>)
 80008aa:	4603      	mov	r3, r0
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	1a1b      	subs	r3, r3, r0
 80008b0:	440b      	add	r3, r1
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	490b      	ldr	r1, [pc, #44]	; (80008e4 <GPIO_Init+0x6fc>)
 80008b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008bc:	4322      	orrs	r2, r4
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	e004      	b.n	80008cc <GPIO_Init+0x6e4>
		}
		else
		{
			Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PIN_STATE, GPIO_UDT_SET_PIN_VALUE_ID);
 80008c2:	2202      	movs	r2, #2
 80008c4:	2102      	movs	r1, #2
 80008c6:	2002      	movs	r0, #2
 80008c8:	f7ff fc84 	bl	80001d4 <Det_ReportError>
		}

		u8PinsCounter++;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <GPIO_Init+0x6f4>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b01      	ldr	r3, [pc, #4]	; (80008dc <GPIO_Init+0x6f4>)
 80008d6:	701a      	strb	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	bd98      	pop	{r3, r4, r7, pc}
 80008dc:	20000090 	.word	0x20000090
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000018 	.word	0x20000018

080008e8 <GPIO_udtAtomicSetPinValue>:

	return udtReturnValue;
}

Std_ReturnType GPIO_udtAtomicSetPinValue(uint8 u8PortId, uint8 u8PinId, uint8 u8Value)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
 80008f2:	460b      	mov	r3, r1
 80008f4:	71bb      	strb	r3, [r7, #6]
 80008f6:	4613      	mov	r3, r2
 80008f8:	717b      	strb	r3, [r7, #5]
	Std_ReturnType udtReturnValue = E_NOT_OK;
 80008fa:	2301      	movs	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]

	if(u8PinId >= 16)
 80008fe:	79bb      	ldrb	r3, [r7, #6]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d905      	bls.n	8000910 <GPIO_udtAtomicSetPinValue+0x28>
	{
		Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PIN_STATE, GPIO_UDTATOMICSETPINVALUE_ID);
 8000904:	2204      	movs	r2, #4
 8000906:	2102      	movs	r1, #2
 8000908:	2002      	movs	r0, #2
 800090a:	f7ff fc63 	bl	80001d4 <Det_ReportError>
 800090e:	e04b      	b.n	80009a8 <GPIO_udtAtomicSetPinValue+0xc0>
	}
	else
		{
			uint8 shift_val;
			switch(u8PortId)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d02e      	beq.n	8000974 <GPIO_udtAtomicSetPinValue+0x8c>
 8000916:	2b03      	cmp	r3, #3
 8000918:	dc40      	bgt.n	800099c <GPIO_udtAtomicSetPinValue+0xb4>
 800091a:	2b01      	cmp	r3, #1
 800091c:	d002      	beq.n	8000924 <GPIO_udtAtomicSetPinValue+0x3c>
 800091e:	2b02      	cmp	r3, #2
 8000920:	d014      	beq.n	800094c <GPIO_udtAtomicSetPinValue+0x64>
 8000922:	e03b      	b.n	800099c <GPIO_udtAtomicSetPinValue+0xb4>
			{
				case GPIO_PORTA:
								  shift_val = (u8Value == GPIO_LOW) ? (u8PinId + 16) : u8PinId;
 8000924:	797b      	ldrb	r3, [r7, #5]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d103      	bne.n	8000932 <GPIO_udtAtomicSetPinValue+0x4a>
 800092a:	79bb      	ldrb	r3, [r7, #6]
 800092c:	3310      	adds	r3, #16
 800092e:	b2db      	uxtb	r3, r3
 8000930:	e000      	b.n	8000934 <GPIO_udtAtomicSetPinValue+0x4c>
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	73bb      	strb	r3, [r7, #14]
								  SET_BIT(GPIOA->BSRR,shift_val);
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <GPIO_udtAtomicSetPinValue+0xcc>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	7bba      	ldrb	r2, [r7, #14]
 800093c:	2101      	movs	r1, #1
 800093e:	fa01 f202 	lsl.w	r2, r1, r2
 8000942:	4611      	mov	r1, r2
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <GPIO_udtAtomicSetPinValue+0xcc>)
 8000946:	430b      	orrs	r3, r1
 8000948:	6193      	str	r3, [r2, #24]
								  break;
 800094a:	e02d      	b.n	80009a8 <GPIO_udtAtomicSetPinValue+0xc0>
				case GPIO_PORTB:
								  shift_val = (u8Value == GPIO_LOW) ? (u8PinId + 16) : u8PinId;
 800094c:	797b      	ldrb	r3, [r7, #5]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d103      	bne.n	800095a <GPIO_udtAtomicSetPinValue+0x72>
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	3310      	adds	r3, #16
 8000956:	b2db      	uxtb	r3, r3
 8000958:	e000      	b.n	800095c <GPIO_udtAtomicSetPinValue+0x74>
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	73bb      	strb	r3, [r7, #14]
								  SET_BIT(GPIOB->BSRR,shift_val);
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <GPIO_udtAtomicSetPinValue+0xd0>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	7bba      	ldrb	r2, [r7, #14]
 8000964:	2101      	movs	r1, #1
 8000966:	fa01 f202 	lsl.w	r2, r1, r2
 800096a:	4611      	mov	r1, r2
 800096c:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <GPIO_udtAtomicSetPinValue+0xd0>)
 800096e:	430b      	orrs	r3, r1
 8000970:	6193      	str	r3, [r2, #24]
				                  break;
 8000972:	e019      	b.n	80009a8 <GPIO_udtAtomicSetPinValue+0xc0>
				case GPIO_PORTC:
								  shift_val = (u8Value == GPIO_LOW) ? (u8PinId + 16) : u8PinId;
 8000974:	797b      	ldrb	r3, [r7, #5]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d103      	bne.n	8000982 <GPIO_udtAtomicSetPinValue+0x9a>
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	3310      	adds	r3, #16
 800097e:	b2db      	uxtb	r3, r3
 8000980:	e000      	b.n	8000984 <GPIO_udtAtomicSetPinValue+0x9c>
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	73bb      	strb	r3, [r7, #14]
								  SET_BIT(GPIOC->BSRR,shift_val);
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <GPIO_udtAtomicSetPinValue+0xd4>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	7bba      	ldrb	r2, [r7, #14]
 800098c:	2101      	movs	r1, #1
 800098e:	fa01 f202 	lsl.w	r2, r1, r2
 8000992:	4611      	mov	r1, r2
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <GPIO_udtAtomicSetPinValue+0xd4>)
 8000996:	430b      	orrs	r3, r1
 8000998:	6193      	str	r3, [r2, #24]
	                    		  break;
 800099a:	e005      	b.n	80009a8 <GPIO_udtAtomicSetPinValue+0xc0>
				default: Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PORT_ID, GPIO_UDT_GET_PIN_VALUE_ID);
 800099c:	2203      	movs	r2, #3
 800099e:	2101      	movs	r1, #1
 80009a0:	2002      	movs	r0, #2
 80009a2:	f7ff fc17 	bl	80001d4 <Det_ReportError>
				break;
 80009a6:	bf00      	nop
			}
		}

		return udtReturnValue;
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400
 80009bc:	40020800 	.word	0x40020800

080009c0 <RCC_udtInitSystemClock>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

Std_ReturnType RCC_udtInitSystemClock (void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_SELECTION  == RCC_HSI
	
	#elif RCC_CLOCK_SELECTION == RCC_HSE_RC
	
	#elif RCC_CLOCK_SELECTION == RCC_HSE_CRYSTAL
	RCC -> CR   = 0x00010000;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <RCC_udtInitSystemClock+0x20>)
 80009c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ca:	601a      	str	r2, [r3, #0]
	RCC -> CFGR = 0x00000001;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <RCC_udtInitSystemClock+0x20>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	609a      	str	r2, [r3, #8]
	
	#else 
		#error "Invalid clock selection"
	#endif 

	return 0;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <RCC_udtEnablePeripheralClock>:

Std_ReturnType RCC_udtEnablePeripheralClock (uint8 u8BusId, uint8 u8PerId)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
	Std_ReturnType udtReturnValue = E_NOT_OK;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
	
	if(u8PerId <= RCC_MAX_PERIPHERAL_ID)
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2b1f      	cmp	r3, #31
 80009fc:	d831      	bhi.n	8000a62 <RCC_udtEnablePeripheralClock+0x7e>
	{
		switch(u8BusId)
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d020      	beq.n	8000a46 <RCC_udtEnablePeripheralClock+0x62>
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	dc2b      	bgt.n	8000a60 <RCC_udtEnablePeripheralClock+0x7c>
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d002      	beq.n	8000a12 <RCC_udtEnablePeripheralClock+0x2e>
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d00d      	beq.n	8000a2c <RCC_udtEnablePeripheralClock+0x48>
						
			default   : /* !Comment: Report Error */
			            #if RCC_DET_USED == STD_ON
			            /* Det_ReportError(RCC_ID, RCC_udtEnablePeripheralClock_ID, RCC_INVALID_BUS_ID); */
						#endif
			            break;
 8000a10:	e026      	b.n	8000a60 <RCC_udtEnablePeripheralClock+0x7c>
			case AHB  : SET_BIT(RCC -> AHB1ENR, u8PerId);
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <RCC_udtEnablePeripheralClock+0x8c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	79ba      	ldrb	r2, [r7, #6]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <RCC_udtEnablePeripheralClock+0x8c>)
 8000a22:	430b      	orrs	r3, r1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
			            udtReturnValue = E_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
			            break;
 8000a2a:	e01a      	b.n	8000a62 <RCC_udtEnablePeripheralClock+0x7e>
			case APB1 : SET_BIT(RCC -> APB1ENR, u8PerId);
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <RCC_udtEnablePeripheralClock+0x8c>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	79ba      	ldrb	r2, [r7, #6]
 8000a32:	2101      	movs	r1, #1
 8000a34:	fa01 f202 	lsl.w	r2, r1, r2
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <RCC_udtEnablePeripheralClock+0x8c>)
 8000a3c:	430b      	orrs	r3, r1
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
			            udtReturnValue = E_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]
			            break;
 8000a44:	e00d      	b.n	8000a62 <RCC_udtEnablePeripheralClock+0x7e>
			case APB2 : SET_BIT(RCC -> APB2ENR, u8PerId);
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <RCC_udtEnablePeripheralClock+0x8c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	79ba      	ldrb	r2, [r7, #6]
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a52:	4611      	mov	r1, r2
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <RCC_udtEnablePeripheralClock+0x8c>)
 8000a56:	430b      	orrs	r3, r1
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
			            udtReturnValue = E_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	73fb      	strb	r3, [r7, #15]
			            break;
 8000a5e:	e000      	b.n	8000a62 <RCC_udtEnablePeripheralClock+0x7e>
			            break;
 8000a60:	bf00      	nop
		#if RCC_DET_USED == STD_ON
		/* Det_ReportError(RCC_ID, RCC_udtEnablePeripheralClock_ID, RCC_INVALID_PERIPHERAL_ID);*/
		#endif
	}
	
	return udtReturnValue;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	40023800 	.word	0x40023800

08000a74 <UART_vidInit>:
#include "UART_interface.h"
#include "UART_private.h"
#include "UART_config.h"

void UART_vidInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	/* !Commnet: BAUDRATE configuration of 115200 */
	UART -> BRR = 0xD9;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <UART_vidInit+0x38>)
 8000a7a:	22d9      	movs	r2, #217	; 0xd9
 8000a7c:	609a      	str	r2, [r3, #8]
	
	/* !Comment: CR1 Configurations */
	//UART -> CR1.B.UE = 1U;
	//UART -> CR1.B.TE = 1U;
	//UART -> CR1.B.RE = 1U;
	SET_BIT(UART -> CR1, 3U);
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <UART_vidInit+0x38>)
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <UART_vidInit+0x38>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	60d3      	str	r3, [r2, #12]
	SET_BIT(UART -> CR1, 2U);
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <UART_vidInit+0x38>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	4a07      	ldr	r2, [pc, #28]	; (8000aac <UART_vidInit+0x38>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	60d3      	str	r3, [r2, #12]
	SET_BIT(UART -> CR1, 13U);
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <UART_vidInit+0x38>)
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <UART_vidInit+0x38>)
 8000a9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aa0:	60d3      	str	r3, [r2, #12]
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40011000 	.word	0x40011000

08000ab0 <UART_udtTransmit>:

Std_ReturnType UART_udtTransmit (uint8* pu8Data) 
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	Std_ReturnType udtRetVal = E_NOT_OK;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	73bb      	strb	r3, [r7, #14]
	
	uint8 u8LocalCounter = 0u;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
	
	while(pu8Data[u8LocalCounter] != '\0')
 8000ac0:	e00f      	b.n	8000ae2 <UART_udtTransmit+0x32>
	{
		UART -> DR = pu8Data[u8LocalCounter++];
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	73fa      	strb	r2, [r7, #15]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <UART_udtTransmit+0x4c>)
 8000ad2:	605a      	str	r2, [r3, #4]
		
		while(GET_BIT(UART -> SR, 7U) == 0U); 
 8000ad4:	bf00      	nop
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <UART_udtTransmit+0x4c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0f9      	beq.n	8000ad6 <UART_udtTransmit+0x26>
	while(pu8Data[u8LocalCounter] != '\0')
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1e9      	bne.n	8000ac2 <UART_udtTransmit+0x12>
	}
	
	return udtRetVal;
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40011000 	.word	0x40011000

08000b00 <UART_udtReceive>:
	
	return udtRetVal;
}

Std_ReturnType UART_udtReceive (uint8* pu8ReceivedData, uint32 u32TimeOutVal)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
	uint32 u32LocalCounter = 0u;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
	
	*pu8ReceivedData = 0u;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
	
	Std_ReturnType udtRetVal = E_NOT_OK;
 8000b14:	2301      	movs	r3, #1
 8000b16:	72fb      	strb	r3, [r7, #11]
		
    while(GET_BIT(UART -> SR, 5U) == 0U)
 8000b18:	e00a      	b.n	8000b30 <UART_udtReceive+0x30>
	{
		u32LocalCounter++;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
		if(u32LocalCounter == u32TimeOutVal)
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d103      	bne.n	8000b30 <UART_udtReceive+0x30>
		{
			*pu8ReceivedData = 130;	
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2282      	movs	r2, #130	; 0x82
 8000b2c:	701a      	strb	r2, [r3, #0]
			break;
 8000b2e:	e005      	b.n	8000b3c <UART_udtReceive+0x3c>
    while(GET_BIT(UART -> SR, 5U) == 0U)
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <UART_udtReceive+0x68>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 0320 	and.w	r3, r3, #32
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0ee      	beq.n	8000b1a <UART_udtReceive+0x1a>
		}
	}
	
	if(*pu8ReceivedData == 0u)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d104      	bne.n	8000b4e <UART_udtReceive+0x4e>
	{
		*pu8ReceivedData = UART -> DR;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <UART_udtReceive+0x68>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	701a      	strb	r2, [r3, #0]
	}
	
	CLR_BIT(UART -> SR, 5U);
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <UART_udtReceive+0x68>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <UART_udtReceive+0x68>)
 8000b54:	f023 0320 	bic.w	r3, r3, #32
 8000b58:	6013      	str	r3, [r2, #0]
	
	return udtRetVal;
 8000b5a:	7afb      	ldrb	r3, [r7, #11]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40011000 	.word	0x40011000

08000b6c <WIFI_vidInit>:


static uint8 validate (uint32 u32TimeOut);

void WIFI_vidInit (void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
	uint8 u8LocalVar = 130u;
 8000b72:	2382      	movs	r3, #130	; 0x82
 8000b74:	71fb      	strb	r3, [r7, #7]
	while(u8LocalVar == 130u)
 8000b76:	e008      	b.n	8000b8a <WIFI_vidInit+0x1e>
	{
		UART_udtTransmit((uint8 *)"AT\r\n");
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <WIFI_vidInit+0x4c>)
 8000b7a:	f7ff ff99 	bl	8000ab0 <UART_udtTransmit>
	    u8LocalVar = validate(10000u);
 8000b7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b82:	f000 f87f 	bl	8000c84 <validate>
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	while(u8LocalVar == 130u)
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b82      	cmp	r3, #130	; 0x82
 8000b8e:	d0f3      	beq.n	8000b78 <WIFI_vidInit+0xc>
	}
	
	u8LocalVar = 130u;
 8000b90:	2382      	movs	r3, #130	; 0x82
 8000b92:	71fb      	strb	r3, [r7, #7]
	while(u8LocalVar == 130u)
 8000b94:	e008      	b.n	8000ba8 <WIFI_vidInit+0x3c>
	{
		UART_udtTransmit((uint8 *)"AT+CWMODE=1\r\n");
 8000b96:	4809      	ldr	r0, [pc, #36]	; (8000bbc <WIFI_vidInit+0x50>)
 8000b98:	f7ff ff8a 	bl	8000ab0 <UART_udtTransmit>
		u8LocalVar = validate(10000u);
 8000b9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ba0:	f000 f870 	bl	8000c84 <validate>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
	while(u8LocalVar == 130u)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b82      	cmp	r3, #130	; 0x82
 8000bac:	d0f3      	beq.n	8000b96 <WIFI_vidInit+0x2a>
	}
	
}
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	08001074 	.word	0x08001074
 8000bbc:	0800107c 	.word	0x0800107c

08000bc0 <WIFI_udtConnectToWIFI>:

Std_ReturnType WIFI_udtConnectToWIFI (void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	uint8 u8LocalVar = 130u;
 8000bc6:	2382      	movs	r3, #130	; 0x82
 8000bc8:	71fb      	strb	r3, [r7, #7]
	while(u8LocalVar == 130u)
 8000bca:	e008      	b.n	8000bde <WIFI_udtConnectToWIFI+0x1e>
	{
		UART_udtTransmit((uint8 *)"AT+CWJAP_CUR =\"HUAWEI Y9 Prime 2019\",\"2872001z\"");
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <WIFI_udtConnectToWIFI+0x30>)
 8000bce:	f7ff ff6f 	bl	8000ab0 <UART_udtTransmit>
	    u8LocalVar = validate(10000u);
 8000bd2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bd6:	f000 f855 	bl	8000c84 <validate>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	while(u8LocalVar == 130u)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b82      	cmp	r3, #130	; 0x82
 8000be2:	d0f3      	beq.n	8000bcc <WIFI_udtConnectToWIFI+0xc>
	}

	return E_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	0800108c 	.word	0x0800108c

08000bf4 <WIFI_udtConnectToServer>:

Std_ReturnType WIFI_udtConnectToServer (void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	uint8 u8LocalVar = 130u;
 8000bfa:	2382      	movs	r3, #130	; 0x82
 8000bfc:	71fb      	strb	r3, [r7, #7]
	while(u8LocalVar == 130u)
 8000bfe:	e008      	b.n	8000c12 <WIFI_udtConnectToServer+0x1e>
	{
		UART_udtTransmit((uint8 *)"AT+CIPSTART=\"TCP\",\"23.179.32.37\",80");
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <WIFI_udtConnectToServer+0x30>)
 8000c02:	f7ff ff55 	bl	8000ab0 <UART_udtTransmit>
	    u8LocalVar = validate(10000);
 8000c06:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c0a:	f000 f83b 	bl	8000c84 <validate>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	while(u8LocalVar == 130u)
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b82      	cmp	r3, #130	; 0x82
 8000c16:	d0f3      	beq.n	8000c00 <WIFI_udtConnectToServer+0xc>
	}
	return E_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	080010bc 	.word	0x080010bc

08000c28 <WIFI_udtGetData>:

Std_ReturnType WIFI_udtGetData (uint8* pu8ReceivedData)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	uint8 u8LocalVar = 130u;
 8000c30:	2382      	movs	r3, #130	; 0x82
 8000c32:	73fb      	strb	r3, [r7, #15]
	while(u8LocalVar == 130u)
 8000c34:	e008      	b.n	8000c48 <WIFI_udtGetData+0x20>
	{
		UART_udtTransmit((uint8 *)"AT+CIPSEND=49");
 8000c36:	4811      	ldr	r0, [pc, #68]	; (8000c7c <WIFI_udtGetData+0x54>)
 8000c38:	f7ff ff3a 	bl	8000ab0 <UART_udtTransmit>
	    u8LocalVar = validate(10000);
 8000c3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c40:	f000 f820 	bl	8000c84 <validate>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]
	while(u8LocalVar == 130u)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b82      	cmp	r3, #130	; 0x82
 8000c4c:	d0f3      	beq.n	8000c36 <WIFI_udtGetData+0xe>
	}
	
	u8LocalVar = 130u;
 8000c4e:	2382      	movs	r3, #130	; 0x82
 8000c50:	73fb      	strb	r3, [r7, #15]
	while(u8LocalVar == 130u)
 8000c52:	e008      	b.n	8000c66 <WIFI_udtGetData+0x3e>
	{
		UART_udtTransmit((uint8 *)"GET http://iotwifi.freevar.com/Applications.txt");
 8000c54:	480a      	ldr	r0, [pc, #40]	; (8000c80 <WIFI_udtGetData+0x58>)
 8000c56:	f7ff ff2b 	bl	8000ab0 <UART_udtTransmit>
	    u8LocalVar = validate(10000);
 8000c5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c5e:	f000 f811 	bl	8000c84 <validate>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]
	while(u8LocalVar == 130u)
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	2b82      	cmp	r3, #130	; 0x82
 8000c6a:	d0f3      	beq.n	8000c54 <WIFI_udtGetData+0x2c>
	}
	
	*pu8ReceivedData = u8LocalVar;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7bfa      	ldrb	r2, [r7, #15]
 8000c70:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	080010e0 	.word	0x080010e0
 8000c80:	080010f0 	.word	0x080010f0

08000c84 <validate>:

static uint8 validate (uint32 u32TimeOut)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09c      	sub	sp, #112	; 0x70
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	uint8 u8LocalCounter = 0u;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8 u8Response[100u];
	
	uint8 u8ReceivedData = 0u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	
	while(u8ReceivedData != 130)
 8000c98:	e011      	b.n	8000cbe <validate+0x3a>
	{
		UART_udtReceive(&u8Response[u8LocalCounter++], u32TimeOut);
 8000c9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	4413      	add	r3, r2
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff26 	bl	8000b00 <UART_udtReceive>
		u8ReceivedData++;
 8000cb4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	while(u8ReceivedData != 130)
 8000cbe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000cc2:	2b82      	cmp	r3, #130	; 0x82
 8000cc4:	d1e9      	bne.n	8000c9a <validate+0x16>
	}	
	
	for(u8LocalCounter = 0; u8LocalCounter < 100; u8LocalCounter++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000ccc:	bf00      	nop
 8000cce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cd2:	2b63      	cmp	r3, #99	; 0x63
 8000cd4:	d836      	bhi.n	8000d44 <validate+0xc0>
	{
		if(u8Response[u8LocalCounter] == 'o' && u8Response[u8LocalCounter+1] == 'k')
 8000cd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cda:	3370      	adds	r3, #112	; 0x70
 8000cdc:	443b      	add	r3, r7
 8000cde:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ce2:	2b6f      	cmp	r3, #111	; 0x6f
 8000ce4:	d10a      	bne.n	8000cfc <validate+0x78>
 8000ce6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cea:	3301      	adds	r3, #1
 8000cec:	3370      	adds	r3, #112	; 0x70
 8000cee:	443b      	add	r3, r7
 8000cf0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cf4:	2b6b      	cmp	r3, #107	; 0x6b
 8000cf6:	d101      	bne.n	8000cfc <validate+0x78>
		{
			return 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e023      	b.n	8000d44 <validate+0xc0>
		}
		else if(u8Response[u8LocalCounter] == 'I' && u8Response[u8LocalCounter+1] == 'P' && u8Response[u8LocalCounter+2] == 'D') 
 8000cfc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d00:	3370      	adds	r3, #112	; 0x70
 8000d02:	443b      	add	r3, r7
 8000d04:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d08:	2b49      	cmp	r3, #73	; 0x49
 8000d0a:	d119      	bne.n	8000d40 <validate+0xbc>
 8000d0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d10:	3301      	adds	r3, #1
 8000d12:	3370      	adds	r3, #112	; 0x70
 8000d14:	443b      	add	r3, r7
 8000d16:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d1a:	2b50      	cmp	r3, #80	; 0x50
 8000d1c:	d110      	bne.n	8000d40 <validate+0xbc>
 8000d1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d22:	3302      	adds	r3, #2
 8000d24:	3370      	adds	r3, #112	; 0x70
 8000d26:	443b      	add	r3, r7
 8000d28:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d2c:	2b44      	cmp	r3, #68	; 0x44
 8000d2e:	d107      	bne.n	8000d40 <validate+0xbc>
		{
			return u8Response[u8LocalCounter + 6];
 8000d30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d34:	3306      	adds	r3, #6
 8000d36:	3370      	adds	r3, #112	; 0x70
 8000d38:	443b      	add	r3, r7
 8000d3a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d3e:	e001      	b.n	8000d44 <validate+0xc0>
		}
        else
		{
			return 130;
 8000d40:	2382      	movs	r3, #130	; 0x82
 8000d42:	e7ff      	b.n	8000d44 <validate+0xc0>
		}			
	}

}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3770      	adds	r7, #112	; 0x70
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <main>:
#include "WIFI_interface.h"



int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	//Enable RCC
	RCC_udtInitSystemClock();
 8000d52:	f7ff fe35 	bl	80009c0 <RCC_udtInitSystemClock>
	RCC_udtEnablePeripheralClock(AHB, 0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff fe43 	bl	80009e4 <RCC_udtEnablePeripheralClock>
	RCC_udtEnablePeripheralClock(APB2, 4);
 8000d5e:	2104      	movs	r1, #4
 8000d60:	2003      	movs	r0, #3
 8000d62:	f7ff fe3f 	bl	80009e4 <RCC_udtEnablePeripheralClock>

	//Init GPIO
	for (int i=0 ; i < 3; i++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	e004      	b.n	8000d76 <main+0x2a>
	{
		GPIO_Init();
 8000d6c:	f7ff fa3c 	bl	80001e8 <GPIO_Init>
	for (int i=0 ; i < 3; i++)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3301      	adds	r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	ddf7      	ble.n	8000d6c <main+0x20>
	}

	//Init Uart
	UART_vidInit();
 8000d7c:	f7ff fe7a 	bl	8000a74 <UART_vidInit>

	//Wifi Init
	WIFI_vidInit();
 8000d80:	f7ff fef4 	bl	8000b6c <WIFI_vidInit>

	//Connect to Wifi
	WIFI_udtConnectToWIFI();
 8000d84:	f7ff ff1c 	bl	8000bc0 <WIFI_udtConnectToWIFI>

	//Connect to Server
	WIFI_udtConnectToServer();
 8000d88:	f7ff ff34 	bl	8000bf4 <WIFI_udtConnectToServer>

	uint8* data = (uint8 *)malloc(sizeof(uint8));
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f000 f875 	bl	8000e7c <malloc>
 8000d92:	4603      	mov	r3, r0
 8000d94:	603b      	str	r3, [r7, #0]
	while(1)
	{
		WIFI_udtGetData(data);
 8000d96:	6838      	ldr	r0, [r7, #0]
 8000d98:	f7ff ff46 	bl	8000c28 <WIFI_udtGetData>

		if (*data == 1)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d105      	bne.n	8000db0 <main+0x64>
		{
			GPIO_udtAtomicSetPinValue(GPIO_PORTA, GPIO_PIN8, GPIO_HIGH);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2108      	movs	r1, #8
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff fd9d 	bl	80008e8 <GPIO_udtAtomicSetPinValue>
 8000dae:	e7f2      	b.n	8000d96 <main+0x4a>
		}
		else
		{
			GPIO_udtAtomicSetPinValue(GPIO_PORTA, GPIO_PIN8, GPIO_LOW);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2108      	movs	r1, #8
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fd97 	bl	80008e8 <GPIO_udtAtomicSetPinValue>
		WIFI_udtGetData(data);
 8000dba:	e7ec      	b.n	8000d96 <main+0x4a>

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f000 f90a 	bl	8001004 <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20010000 	.word	0x20010000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	20000094 	.word	0x20000094
 8000e24:	200001e0 	.word	0x200001e0

08000e28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e56:	f000 f8db 	bl	8001010 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5a:	f7ff ff77 	bl	8000d4c <main>

08000e5e <LoopForever>:

LoopForever:
  b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e6c:	08001128 	.word	0x08001128
  ldr r2, =_sbss
 8000e70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e74:	200001e0 	.word	0x200001e0

08000e78 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <malloc>:
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <malloc+0xc>)
 8000e7e:	4601      	mov	r1, r0
 8000e80:	6818      	ldr	r0, [r3, #0]
 8000e82:	f000 b823 	b.w	8000ecc <_malloc_r>
 8000e86:	bf00      	nop
 8000e88:	20000070 	.word	0x20000070

08000e8c <sbrk_aligned>:
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	4e0e      	ldr	r6, [pc, #56]	; (8000ec8 <sbrk_aligned+0x3c>)
 8000e90:	460c      	mov	r4, r1
 8000e92:	6831      	ldr	r1, [r6, #0]
 8000e94:	4605      	mov	r5, r0
 8000e96:	b911      	cbnz	r1, 8000e9e <sbrk_aligned+0x12>
 8000e98:	f000 f8a4 	bl	8000fe4 <_sbrk_r>
 8000e9c:	6030      	str	r0, [r6, #0]
 8000e9e:	4621      	mov	r1, r4
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f000 f89f 	bl	8000fe4 <_sbrk_r>
 8000ea6:	1c43      	adds	r3, r0, #1
 8000ea8:	d00a      	beq.n	8000ec0 <sbrk_aligned+0x34>
 8000eaa:	1cc4      	adds	r4, r0, #3
 8000eac:	f024 0403 	bic.w	r4, r4, #3
 8000eb0:	42a0      	cmp	r0, r4
 8000eb2:	d007      	beq.n	8000ec4 <sbrk_aligned+0x38>
 8000eb4:	1a21      	subs	r1, r4, r0
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	f000 f894 	bl	8000fe4 <_sbrk_r>
 8000ebc:	3001      	adds	r0, #1
 8000ebe:	d101      	bne.n	8000ec4 <sbrk_aligned+0x38>
 8000ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	bd70      	pop	{r4, r5, r6, pc}
 8000ec8:	2000009c 	.word	0x2000009c

08000ecc <_malloc_r>:
 8000ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ed0:	1ccd      	adds	r5, r1, #3
 8000ed2:	f025 0503 	bic.w	r5, r5, #3
 8000ed6:	3508      	adds	r5, #8
 8000ed8:	2d0c      	cmp	r5, #12
 8000eda:	bf38      	it	cc
 8000edc:	250c      	movcc	r5, #12
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	4607      	mov	r7, r0
 8000ee2:	db01      	blt.n	8000ee8 <_malloc_r+0x1c>
 8000ee4:	42a9      	cmp	r1, r5
 8000ee6:	d905      	bls.n	8000ef4 <_malloc_r+0x28>
 8000ee8:	230c      	movs	r3, #12
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	2600      	movs	r6, #0
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ef4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000fc8 <_malloc_r+0xfc>
 8000ef8:	f000 f868 	bl	8000fcc <__malloc_lock>
 8000efc:	f8d8 3000 	ldr.w	r3, [r8]
 8000f00:	461c      	mov	r4, r3
 8000f02:	bb5c      	cbnz	r4, 8000f5c <_malloc_r+0x90>
 8000f04:	4629      	mov	r1, r5
 8000f06:	4638      	mov	r0, r7
 8000f08:	f7ff ffc0 	bl	8000e8c <sbrk_aligned>
 8000f0c:	1c43      	adds	r3, r0, #1
 8000f0e:	4604      	mov	r4, r0
 8000f10:	d155      	bne.n	8000fbe <_malloc_r+0xf2>
 8000f12:	f8d8 4000 	ldr.w	r4, [r8]
 8000f16:	4626      	mov	r6, r4
 8000f18:	2e00      	cmp	r6, #0
 8000f1a:	d145      	bne.n	8000fa8 <_malloc_r+0xdc>
 8000f1c:	2c00      	cmp	r4, #0
 8000f1e:	d048      	beq.n	8000fb2 <_malloc_r+0xe6>
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	4631      	mov	r1, r6
 8000f24:	4638      	mov	r0, r7
 8000f26:	eb04 0903 	add.w	r9, r4, r3
 8000f2a:	f000 f85b 	bl	8000fe4 <_sbrk_r>
 8000f2e:	4581      	cmp	r9, r0
 8000f30:	d13f      	bne.n	8000fb2 <_malloc_r+0xe6>
 8000f32:	6821      	ldr	r1, [r4, #0]
 8000f34:	1a6d      	subs	r5, r5, r1
 8000f36:	4629      	mov	r1, r5
 8000f38:	4638      	mov	r0, r7
 8000f3a:	f7ff ffa7 	bl	8000e8c <sbrk_aligned>
 8000f3e:	3001      	adds	r0, #1
 8000f40:	d037      	beq.n	8000fb2 <_malloc_r+0xe6>
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	442b      	add	r3, r5
 8000f46:	6023      	str	r3, [r4, #0]
 8000f48:	f8d8 3000 	ldr.w	r3, [r8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d038      	beq.n	8000fc2 <_malloc_r+0xf6>
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	42a2      	cmp	r2, r4
 8000f54:	d12b      	bne.n	8000fae <_malloc_r+0xe2>
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	e00f      	b.n	8000f7c <_malloc_r+0xb0>
 8000f5c:	6822      	ldr	r2, [r4, #0]
 8000f5e:	1b52      	subs	r2, r2, r5
 8000f60:	d41f      	bmi.n	8000fa2 <_malloc_r+0xd6>
 8000f62:	2a0b      	cmp	r2, #11
 8000f64:	d917      	bls.n	8000f96 <_malloc_r+0xca>
 8000f66:	1961      	adds	r1, r4, r5
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	6025      	str	r5, [r4, #0]
 8000f6c:	bf18      	it	ne
 8000f6e:	6059      	strne	r1, [r3, #4]
 8000f70:	6863      	ldr	r3, [r4, #4]
 8000f72:	bf08      	it	eq
 8000f74:	f8c8 1000 	streq.w	r1, [r8]
 8000f78:	5162      	str	r2, [r4, r5]
 8000f7a:	604b      	str	r3, [r1, #4]
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	f104 060b 	add.w	r6, r4, #11
 8000f82:	f000 f829 	bl	8000fd8 <__malloc_unlock>
 8000f86:	f026 0607 	bic.w	r6, r6, #7
 8000f8a:	1d23      	adds	r3, r4, #4
 8000f8c:	1af2      	subs	r2, r6, r3
 8000f8e:	d0ae      	beq.n	8000eee <_malloc_r+0x22>
 8000f90:	1b9b      	subs	r3, r3, r6
 8000f92:	50a3      	str	r3, [r4, r2]
 8000f94:	e7ab      	b.n	8000eee <_malloc_r+0x22>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	6862      	ldr	r2, [r4, #4]
 8000f9a:	d1dd      	bne.n	8000f58 <_malloc_r+0x8c>
 8000f9c:	f8c8 2000 	str.w	r2, [r8]
 8000fa0:	e7ec      	b.n	8000f7c <_malloc_r+0xb0>
 8000fa2:	4623      	mov	r3, r4
 8000fa4:	6864      	ldr	r4, [r4, #4]
 8000fa6:	e7ac      	b.n	8000f02 <_malloc_r+0x36>
 8000fa8:	4634      	mov	r4, r6
 8000faa:	6876      	ldr	r6, [r6, #4]
 8000fac:	e7b4      	b.n	8000f18 <_malloc_r+0x4c>
 8000fae:	4613      	mov	r3, r2
 8000fb0:	e7cc      	b.n	8000f4c <_malloc_r+0x80>
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4638      	mov	r0, r7
 8000fb8:	f000 f80e 	bl	8000fd8 <__malloc_unlock>
 8000fbc:	e797      	b.n	8000eee <_malloc_r+0x22>
 8000fbe:	6025      	str	r5, [r4, #0]
 8000fc0:	e7dc      	b.n	8000f7c <_malloc_r+0xb0>
 8000fc2:	605b      	str	r3, [r3, #4]
 8000fc4:	deff      	udf	#255	; 0xff
 8000fc6:	bf00      	nop
 8000fc8:	20000098 	.word	0x20000098

08000fcc <__malloc_lock>:
 8000fcc:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <__malloc_lock+0x8>)
 8000fce:	f000 b843 	b.w	8001058 <__retarget_lock_acquire_recursive>
 8000fd2:	bf00      	nop
 8000fd4:	200001dc 	.word	0x200001dc

08000fd8 <__malloc_unlock>:
 8000fd8:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <__malloc_unlock+0x8>)
 8000fda:	f000 b83e 	b.w	800105a <__retarget_lock_release_recursive>
 8000fde:	bf00      	nop
 8000fe0:	200001dc 	.word	0x200001dc

08000fe4 <_sbrk_r>:
 8000fe4:	b538      	push	{r3, r4, r5, lr}
 8000fe6:	4d06      	ldr	r5, [pc, #24]	; (8001000 <_sbrk_r+0x1c>)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	602b      	str	r3, [r5, #0]
 8000ff0:	f7ff fee4 	bl	8000dbc <_sbrk>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	d102      	bne.n	8000ffe <_sbrk_r+0x1a>
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	b103      	cbz	r3, 8000ffe <_sbrk_r+0x1a>
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
 8001000:	200001d8 	.word	0x200001d8

08001004 <__errno>:
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <__errno+0x8>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000070 	.word	0x20000070

08001010 <__libc_init_array>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	4d0d      	ldr	r5, [pc, #52]	; (8001048 <__libc_init_array+0x38>)
 8001014:	4c0d      	ldr	r4, [pc, #52]	; (800104c <__libc_init_array+0x3c>)
 8001016:	1b64      	subs	r4, r4, r5
 8001018:	10a4      	asrs	r4, r4, #2
 800101a:	2600      	movs	r6, #0
 800101c:	42a6      	cmp	r6, r4
 800101e:	d109      	bne.n	8001034 <__libc_init_array+0x24>
 8001020:	4d0b      	ldr	r5, [pc, #44]	; (8001050 <__libc_init_array+0x40>)
 8001022:	4c0c      	ldr	r4, [pc, #48]	; (8001054 <__libc_init_array+0x44>)
 8001024:	f000 f81a 	bl	800105c <_init>
 8001028:	1b64      	subs	r4, r4, r5
 800102a:	10a4      	asrs	r4, r4, #2
 800102c:	2600      	movs	r6, #0
 800102e:	42a6      	cmp	r6, r4
 8001030:	d105      	bne.n	800103e <__libc_init_array+0x2e>
 8001032:	bd70      	pop	{r4, r5, r6, pc}
 8001034:	f855 3b04 	ldr.w	r3, [r5], #4
 8001038:	4798      	blx	r3
 800103a:	3601      	adds	r6, #1
 800103c:	e7ee      	b.n	800101c <__libc_init_array+0xc>
 800103e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001042:	4798      	blx	r3
 8001044:	3601      	adds	r6, #1
 8001046:	e7f2      	b.n	800102e <__libc_init_array+0x1e>
 8001048:	08001120 	.word	0x08001120
 800104c:	08001120 	.word	0x08001120
 8001050:	08001120 	.word	0x08001120
 8001054:	08001124 	.word	0x08001124

08001058 <__retarget_lock_acquire_recursive>:
 8001058:	4770      	bx	lr

0800105a <__retarget_lock_release_recursive>:
 800105a:	4770      	bx	lr

0800105c <_init>:
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	bf00      	nop
 8001060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001062:	bc08      	pop	{r3}
 8001064:	469e      	mov	lr, r3
 8001066:	4770      	bx	lr

08001068 <_fini>:
 8001068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106a:	bf00      	nop
 800106c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106e:	bc08      	pop	{r3}
 8001070:	469e      	mov	lr, r3
 8001072:	4770      	bx	lr
